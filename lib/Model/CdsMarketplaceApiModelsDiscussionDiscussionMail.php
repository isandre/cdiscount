<?php
/**
 * CdsMarketplaceApiModelsDiscussionDiscussionMail
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Order Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CdsMarketplaceApiModelsDiscussionDiscussionMail Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CdsMarketplaceApiModelsDiscussionDiscussionMail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cds.MarketplaceApi.Models.Discussion.DiscussionMail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mail_guid_id' => 'string',
        'order_id' => 'string',
        'seller_id' => 'int',
        'customer_id' => 'string',
        'seller_mail' => 'string',
        'customer_mail' => 'string',
        'root_discussion_id' => 'int',
        'creation_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mail_guid_id' => 'uuid',
        'order_id' => null,
        'seller_id' => 'int64',
        'customer_id' => null,
        'seller_mail' => null,
        'customer_mail' => null,
        'root_discussion_id' => 'int64',
        'creation_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mail_guid_id' => 'mail_guid_id',
        'order_id' => 'order_id',
        'seller_id' => 'seller_id',
        'customer_id' => 'customer_id',
        'seller_mail' => 'seller_mail',
        'customer_mail' => 'customer_mail',
        'root_discussion_id' => 'root_discussion_id',
        'creation_date' => 'creation_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mail_guid_id' => 'setMailGuidId',
        'order_id' => 'setOrderId',
        'seller_id' => 'setSellerId',
        'customer_id' => 'setCustomerId',
        'seller_mail' => 'setSellerMail',
        'customer_mail' => 'setCustomerMail',
        'root_discussion_id' => 'setRootDiscussionId',
        'creation_date' => 'setCreationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mail_guid_id' => 'getMailGuidId',
        'order_id' => 'getOrderId',
        'seller_id' => 'getSellerId',
        'customer_id' => 'getCustomerId',
        'seller_mail' => 'getSellerMail',
        'customer_mail' => 'getCustomerMail',
        'root_discussion_id' => 'getRootDiscussionId',
        'creation_date' => 'getCreationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mail_guid_id'] = $data['mail_guid_id'] ?? null;
        $this->container['order_id'] = $data['order_id'] ?? null;
        $this->container['seller_id'] = $data['seller_id'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['seller_mail'] = $data['seller_mail'] ?? null;
        $this->container['customer_mail'] = $data['customer_mail'] ?? null;
        $this->container['root_discussion_id'] = $data['root_discussion_id'] ?? null;
        $this->container['creation_date'] = $data['creation_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mail_guid_id
     *
     * @return string|null
     */
    public function getMailGuidId()
    {
        return $this->container['mail_guid_id'];
    }

    /**
     * Sets mail_guid_id
     *
     * @param string|null $mail_guid_id mail_guid_id
     *
     * @return self
     */
    public function setMailGuidId($mail_guid_id)
    {
        $this->container['mail_guid_id'] = $mail_guid_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id order_id
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets seller_id
     *
     * @return int|null
     */
    public function getSellerId()
    {
        return $this->container['seller_id'];
    }

    /**
     * Sets seller_id
     *
     * @param int|null $seller_id seller_id
     *
     * @return self
     */
    public function setSellerId($seller_id)
    {
        $this->container['seller_id'] = $seller_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets seller_mail
     *
     * @return string|null
     */
    public function getSellerMail()
    {
        return $this->container['seller_mail'];
    }

    /**
     * Sets seller_mail
     *
     * @param string|null $seller_mail seller_mail
     *
     * @return self
     */
    public function setSellerMail($seller_mail)
    {
        $this->container['seller_mail'] = $seller_mail;

        return $this;
    }

    /**
     * Gets customer_mail
     *
     * @return string|null
     */
    public function getCustomerMail()
    {
        return $this->container['customer_mail'];
    }

    /**
     * Sets customer_mail
     *
     * @param string|null $customer_mail customer_mail
     *
     * @return self
     */
    public function setCustomerMail($customer_mail)
    {
        $this->container['customer_mail'] = $customer_mail;

        return $this;
    }

    /**
     * Gets root_discussion_id
     *
     * @return int|null
     */
    public function getRootDiscussionId()
    {
        return $this->container['root_discussion_id'];
    }

    /**
     * Sets root_discussion_id
     *
     * @param int|null $root_discussion_id root_discussion_id
     *
     * @return self
     */
    public function setRootDiscussionId($root_discussion_id)
    {
        $this->container['root_discussion_id'] = $root_discussion_id;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


