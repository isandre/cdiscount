<?php
/**
 * CdsMarketplaceApiModelsProductIntegrationDtosProductDto
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Order Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CdsMarketplaceApiModelsProductIntegrationDtosProductDto Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CdsMarketplaceApiModelsProductIntegrationDtosProductDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cds.MarketplaceApi.Models.ProductIntegration.Dtos.ProductDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'brand_name' => 'string',
        'category_code' => 'string',
        'facet' => 'string',
        'declination' => 'string',
        'ean' => 'string',
        'product_id' => 'string',
        'father_product_id' => 'string',
        'grand_father_productid' => 'string',
        'image_name' => 'string',
        'name' => 'string',
        'product_type' => 'string',
        'size' => 'string',
        'manufacturer_product_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'brand_name' => null,
        'category_code' => null,
        'facet' => null,
        'declination' => null,
        'ean' => null,
        'product_id' => null,
        'father_product_id' => null,
        'grand_father_productid' => null,
        'image_name' => null,
        'name' => null,
        'product_type' => null,
        'size' => null,
        'manufacturer_product_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'brand_name' => 'brand_name',
        'category_code' => 'category_code',
        'facet' => 'facet',
        'declination' => 'declination',
        'ean' => 'ean',
        'product_id' => 'product_id',
        'father_product_id' => 'father_product_id',
        'grand_father_productid' => 'grand_father_productid',
        'image_name' => 'image_name',
        'name' => 'name',
        'product_type' => 'product_type',
        'size' => 'size',
        'manufacturer_product_number' => 'manufacturer_product_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'brand_name' => 'setBrandName',
        'category_code' => 'setCategoryCode',
        'facet' => 'setFacet',
        'declination' => 'setDeclination',
        'ean' => 'setEan',
        'product_id' => 'setProductId',
        'father_product_id' => 'setFatherProductId',
        'grand_father_productid' => 'setGrandFatherProductid',
        'image_name' => 'setImageName',
        'name' => 'setName',
        'product_type' => 'setProductType',
        'size' => 'setSize',
        'manufacturer_product_number' => 'setManufacturerProductNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'brand_name' => 'getBrandName',
        'category_code' => 'getCategoryCode',
        'facet' => 'getFacet',
        'declination' => 'getDeclination',
        'ean' => 'getEan',
        'product_id' => 'getProductId',
        'father_product_id' => 'getFatherProductId',
        'grand_father_productid' => 'getGrandFatherProductid',
        'image_name' => 'getImageName',
        'name' => 'getName',
        'product_type' => 'getProductType',
        'size' => 'getSize',
        'manufacturer_product_number' => 'getManufacturerProductNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['brand_name'] = $data['brand_name'] ?? null;
        $this->container['category_code'] = $data['category_code'] ?? null;
        $this->container['facet'] = $data['facet'] ?? null;
        $this->container['declination'] = $data['declination'] ?? null;
        $this->container['ean'] = $data['ean'] ?? null;
        $this->container['product_id'] = $data['product_id'] ?? null;
        $this->container['father_product_id'] = $data['father_product_id'] ?? null;
        $this->container['grand_father_productid'] = $data['grand_father_productid'] ?? null;
        $this->container['image_name'] = $data['image_name'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['product_type'] = $data['product_type'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['manufacturer_product_number'] = $data['manufacturer_product_number'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets brand_name
     *
     * @return string|null
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string|null $brand_name brand_name
     *
     * @return self
     */
    public function setBrandName($brand_name)
    {
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets category_code
     *
     * @return string|null
     */
    public function getCategoryCode()
    {
        return $this->container['category_code'];
    }

    /**
     * Sets category_code
     *
     * @param string|null $category_code category_code
     *
     * @return self
     */
    public function setCategoryCode($category_code)
    {
        $this->container['category_code'] = $category_code;

        return $this;
    }

    /**
     * Gets facet
     *
     * @return string|null
     */
    public function getFacet()
    {
        return $this->container['facet'];
    }

    /**
     * Sets facet
     *
     * @param string|null $facet facet
     *
     * @return self
     */
    public function setFacet($facet)
    {
        $this->container['facet'] = $facet;

        return $this;
    }

    /**
     * Gets declination
     *
     * @return string|null
     */
    public function getDeclination()
    {
        return $this->container['declination'];
    }

    /**
     * Sets declination
     *
     * @param string|null $declination declination
     *
     * @return self
     */
    public function setDeclination($declination)
    {
        $this->container['declination'] = $declination;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean ean
     *
     * @return self
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets father_product_id
     *
     * @return string|null
     */
    public function getFatherProductId()
    {
        return $this->container['father_product_id'];
    }

    /**
     * Sets father_product_id
     *
     * @param string|null $father_product_id father_product_id
     *
     * @return self
     */
    public function setFatherProductId($father_product_id)
    {
        $this->container['father_product_id'] = $father_product_id;

        return $this;
    }

    /**
     * Gets grand_father_productid
     *
     * @return string|null
     */
    public function getGrandFatherProductid()
    {
        return $this->container['grand_father_productid'];
    }

    /**
     * Sets grand_father_productid
     *
     * @param string|null $grand_father_productid grand_father_productid
     *
     * @return self
     */
    public function setGrandFatherProductid($grand_father_productid)
    {
        $this->container['grand_father_productid'] = $grand_father_productid;

        return $this;
    }

    /**
     * Gets image_name
     *
     * @return string|null
     */
    public function getImageName()
    {
        return $this->container['image_name'];
    }

    /**
     * Sets image_name
     *
     * @param string|null $image_name image_name
     *
     * @return self
     */
    public function setImageName($image_name)
    {
        $this->container['image_name'] = $image_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type product_type
     *
     * @return self
     */
    public function setProductType($product_type)
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets manufacturer_product_number
     *
     * @return string|null
     */
    public function getManufacturerProductNumber()
    {
        return $this->container['manufacturer_product_number'];
    }

    /**
     * Sets manufacturer_product_number
     *
     * @param string|null $manufacturer_product_number manufacturer_product_number
     *
     * @return self
     */
    public function setManufacturerProductNumber($manufacturer_product_number)
    {
        $this->container['manufacturer_product_number'] = $manufacturer_product_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


