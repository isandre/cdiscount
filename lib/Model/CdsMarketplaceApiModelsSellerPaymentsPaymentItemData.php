<?php
/**
 * CdsMarketplaceApiModelsSellerPaymentsPaymentItemData
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Order Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CdsMarketplaceApiModelsSellerPaymentsPaymentItemData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CdsMarketplaceApiModelsSellerPaymentsPaymentItemData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cds.MarketplaceApi.Models.SellerPayments.PaymentItemData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sales_amount' => 'double',
        'sales_without_refund_amount' => 'double',
        'commissions_amount' => 'double',
        'cdiscount_services_amount' => 'double',
        'refund_amount' => 'double',
        'security_deposit_amount' => 'double',
        'total_amount' => 'double',
        'payment_date' => '\DateTime',
        'payment_state' => '\OpenAPI\Client\Model\CdsMarketplaceApiModelsSellerPaymentsPaymentState',
        'payment_state_motive' => 'string',
        'payment_blocked_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sales_amount' => 'double',
        'sales_without_refund_amount' => 'double',
        'commissions_amount' => 'double',
        'cdiscount_services_amount' => 'double',
        'refund_amount' => 'double',
        'security_deposit_amount' => 'double',
        'total_amount' => 'double',
        'payment_date' => 'date-time',
        'payment_state' => null,
        'payment_state_motive' => null,
        'payment_blocked_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_amount' => 'sales_amount',
        'sales_without_refund_amount' => 'sales_without_refund_amount',
        'commissions_amount' => 'commissions_amount',
        'cdiscount_services_amount' => 'cdiscount_services_amount',
        'refund_amount' => 'refund_amount',
        'security_deposit_amount' => 'security_deposit_amount',
        'total_amount' => 'total_amount',
        'payment_date' => 'payment_date',
        'payment_state' => 'payment_state',
        'payment_state_motive' => 'payment_state_motive',
        'payment_blocked_date' => 'payment_blocked_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sales_amount' => 'setSalesAmount',
        'sales_without_refund_amount' => 'setSalesWithoutRefundAmount',
        'commissions_amount' => 'setCommissionsAmount',
        'cdiscount_services_amount' => 'setCdiscountServicesAmount',
        'refund_amount' => 'setRefundAmount',
        'security_deposit_amount' => 'setSecurityDepositAmount',
        'total_amount' => 'setTotalAmount',
        'payment_date' => 'setPaymentDate',
        'payment_state' => 'setPaymentState',
        'payment_state_motive' => 'setPaymentStateMotive',
        'payment_blocked_date' => 'setPaymentBlockedDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sales_amount' => 'getSalesAmount',
        'sales_without_refund_amount' => 'getSalesWithoutRefundAmount',
        'commissions_amount' => 'getCommissionsAmount',
        'cdiscount_services_amount' => 'getCdiscountServicesAmount',
        'refund_amount' => 'getRefundAmount',
        'security_deposit_amount' => 'getSecurityDepositAmount',
        'total_amount' => 'getTotalAmount',
        'payment_date' => 'getPaymentDate',
        'payment_state' => 'getPaymentState',
        'payment_state_motive' => 'getPaymentStateMotive',
        'payment_blocked_date' => 'getPaymentBlockedDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sales_amount'] = $data['sales_amount'] ?? null;
        $this->container['sales_without_refund_amount'] = $data['sales_without_refund_amount'] ?? null;
        $this->container['commissions_amount'] = $data['commissions_amount'] ?? null;
        $this->container['cdiscount_services_amount'] = $data['cdiscount_services_amount'] ?? null;
        $this->container['refund_amount'] = $data['refund_amount'] ?? null;
        $this->container['security_deposit_amount'] = $data['security_deposit_amount'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['payment_date'] = $data['payment_date'] ?? null;
        $this->container['payment_state'] = $data['payment_state'] ?? null;
        $this->container['payment_state_motive'] = $data['payment_state_motive'] ?? null;
        $this->container['payment_blocked_date'] = $data['payment_blocked_date'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sales_amount
     *
     * @return double|null
     */
    public function getSalesAmount()
    {
        return $this->container['sales_amount'];
    }

    /**
     * Sets sales_amount
     *
     * @param double|null $sales_amount sales_amount
     *
     * @return self
     */
    public function setSalesAmount($sales_amount)
    {
        $this->container['sales_amount'] = $sales_amount;

        return $this;
    }

    /**
     * Gets sales_without_refund_amount
     *
     * @return double|null
     */
    public function getSalesWithoutRefundAmount()
    {
        return $this->container['sales_without_refund_amount'];
    }

    /**
     * Sets sales_without_refund_amount
     *
     * @param double|null $sales_without_refund_amount sales_without_refund_amount
     *
     * @return self
     */
    public function setSalesWithoutRefundAmount($sales_without_refund_amount)
    {
        $this->container['sales_without_refund_amount'] = $sales_without_refund_amount;

        return $this;
    }

    /**
     * Gets commissions_amount
     *
     * @return double|null
     */
    public function getCommissionsAmount()
    {
        return $this->container['commissions_amount'];
    }

    /**
     * Sets commissions_amount
     *
     * @param double|null $commissions_amount commissions_amount
     *
     * @return self
     */
    public function setCommissionsAmount($commissions_amount)
    {
        $this->container['commissions_amount'] = $commissions_amount;

        return $this;
    }

    /**
     * Gets cdiscount_services_amount
     *
     * @return double|null
     */
    public function getCdiscountServicesAmount()
    {
        return $this->container['cdiscount_services_amount'];
    }

    /**
     * Sets cdiscount_services_amount
     *
     * @param double|null $cdiscount_services_amount cdiscount_services_amount
     *
     * @return self
     */
    public function setCdiscountServicesAmount($cdiscount_services_amount)
    {
        $this->container['cdiscount_services_amount'] = $cdiscount_services_amount;

        return $this;
    }

    /**
     * Gets refund_amount
     *
     * @return double|null
     */
    public function getRefundAmount()
    {
        return $this->container['refund_amount'];
    }

    /**
     * Sets refund_amount
     *
     * @param double|null $refund_amount refund_amount
     *
     * @return self
     */
    public function setRefundAmount($refund_amount)
    {
        $this->container['refund_amount'] = $refund_amount;

        return $this;
    }

    /**
     * Gets security_deposit_amount
     *
     * @return double|null
     */
    public function getSecurityDepositAmount()
    {
        return $this->container['security_deposit_amount'];
    }

    /**
     * Sets security_deposit_amount
     *
     * @param double|null $security_deposit_amount security_deposit_amount
     *
     * @return self
     */
    public function setSecurityDepositAmount($security_deposit_amount)
    {
        $this->container['security_deposit_amount'] = $security_deposit_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime|null
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime|null $payment_date payment_date
     *
     * @return self
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets payment_state
     *
     * @return \OpenAPI\Client\Model\CdsMarketplaceApiModelsSellerPaymentsPaymentState|null
     */
    public function getPaymentState()
    {
        return $this->container['payment_state'];
    }

    /**
     * Sets payment_state
     *
     * @param \OpenAPI\Client\Model\CdsMarketplaceApiModelsSellerPaymentsPaymentState|null $payment_state payment_state
     *
     * @return self
     */
    public function setPaymentState($payment_state)
    {
        $this->container['payment_state'] = $payment_state;

        return $this;
    }

    /**
     * Gets payment_state_motive
     *
     * @return string|null
     */
    public function getPaymentStateMotive()
    {
        return $this->container['payment_state_motive'];
    }

    /**
     * Sets payment_state_motive
     *
     * @param string|null $payment_state_motive payment_state_motive
     *
     * @return self
     */
    public function setPaymentStateMotive($payment_state_motive)
    {
        $this->container['payment_state_motive'] = $payment_state_motive;

        return $this;
    }

    /**
     * Gets payment_blocked_date
     *
     * @return \DateTime|null
     */
    public function getPaymentBlockedDate()
    {
        return $this->container['payment_blocked_date'];
    }

    /**
     * Sets payment_blocked_date
     *
     * @param \DateTime|null $payment_blocked_date payment_blocked_date
     *
     * @return self
     */
    public function setPaymentBlockedDate($payment_blocked_date)
    {
        $this->container['payment_blocked_date'] = $payment_blocked_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


