<?php
/**
 * CdsMarketplaceApiModelsCategoryModelsProperty
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Order Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CdsMarketplaceApiModelsCategoryModelsProperty Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CdsMarketplaceApiModelsCategoryModelsProperty implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cds.MarketplaceApi.Models.CategoryModels.Property';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'property_id' => 'int',
        'property_name' => 'string',
        'property_code' => 'string',
        'is_multiple' => 'bool',
        'is_search' => 'bool',
        'property_type' => 'int',
        'is_ranged' => 'bool',
        'ranges' => '\OpenAPI\Client\Model\CdsMarketplaceApiModelsCategoryModelsRangedValues[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'property_id' => 'int32',
        'property_name' => null,
        'property_code' => null,
        'is_multiple' => null,
        'is_search' => null,
        'property_type' => 'int32',
        'is_ranged' => null,
        'ranges' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_id' => 'property_id',
        'property_name' => 'property_name',
        'property_code' => 'property_code',
        'is_multiple' => 'is_multiple',
        'is_search' => 'is_search',
        'property_type' => 'property_type',
        'is_ranged' => 'is_ranged',
        'ranges' => 'ranges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_id' => 'setPropertyId',
        'property_name' => 'setPropertyName',
        'property_code' => 'setPropertyCode',
        'is_multiple' => 'setIsMultiple',
        'is_search' => 'setIsSearch',
        'property_type' => 'setPropertyType',
        'is_ranged' => 'setIsRanged',
        'ranges' => 'setRanges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_id' => 'getPropertyId',
        'property_name' => 'getPropertyName',
        'property_code' => 'getPropertyCode',
        'is_multiple' => 'getIsMultiple',
        'is_search' => 'getIsSearch',
        'property_type' => 'getPropertyType',
        'is_ranged' => 'getIsRanged',
        'ranges' => 'getRanges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_id'] = $data['property_id'] ?? null;
        $this->container['property_name'] = $data['property_name'] ?? null;
        $this->container['property_code'] = $data['property_code'] ?? null;
        $this->container['is_multiple'] = $data['is_multiple'] ?? null;
        $this->container['is_search'] = $data['is_search'] ?? null;
        $this->container['property_type'] = $data['property_type'] ?? null;
        $this->container['is_ranged'] = $data['is_ranged'] ?? null;
        $this->container['ranges'] = $data['ranges'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_id
     *
     * @return int|null
     */
    public function getPropertyId()
    {
        return $this->container['property_id'];
    }

    /**
     * Sets property_id
     *
     * @param int|null $property_id property_id
     *
     * @return self
     */
    public function setPropertyId($property_id)
    {
        $this->container['property_id'] = $property_id;

        return $this;
    }

    /**
     * Gets property_name
     *
     * @return string|null
     */
    public function getPropertyName()
    {
        return $this->container['property_name'];
    }

    /**
     * Sets property_name
     *
     * @param string|null $property_name property_name
     *
     * @return self
     */
    public function setPropertyName($property_name)
    {
        $this->container['property_name'] = $property_name;

        return $this;
    }

    /**
     * Gets property_code
     *
     * @return string|null
     */
    public function getPropertyCode()
    {
        return $this->container['property_code'];
    }

    /**
     * Sets property_code
     *
     * @param string|null $property_code property_code
     *
     * @return self
     */
    public function setPropertyCode($property_code)
    {
        $this->container['property_code'] = $property_code;

        return $this;
    }

    /**
     * Gets is_multiple
     *
     * @return bool|null
     */
    public function getIsMultiple()
    {
        return $this->container['is_multiple'];
    }

    /**
     * Sets is_multiple
     *
     * @param bool|null $is_multiple is_multiple
     *
     * @return self
     */
    public function setIsMultiple($is_multiple)
    {
        $this->container['is_multiple'] = $is_multiple;

        return $this;
    }

    /**
     * Gets is_search
     *
     * @return bool|null
     */
    public function getIsSearch()
    {
        return $this->container['is_search'];
    }

    /**
     * Sets is_search
     *
     * @param bool|null $is_search is_search
     *
     * @return self
     */
    public function setIsSearch($is_search)
    {
        $this->container['is_search'] = $is_search;

        return $this;
    }

    /**
     * Gets property_type
     *
     * @return int|null
     */
    public function getPropertyType()
    {
        return $this->container['property_type'];
    }

    /**
     * Sets property_type
     *
     * @param int|null $property_type property_type
     *
     * @return self
     */
    public function setPropertyType($property_type)
    {
        $this->container['property_type'] = $property_type;

        return $this;
    }

    /**
     * Gets is_ranged
     *
     * @return bool|null
     */
    public function getIsRanged()
    {
        return $this->container['is_ranged'];
    }

    /**
     * Sets is_ranged
     *
     * @param bool|null $is_ranged is_ranged
     *
     * @return self
     */
    public function setIsRanged($is_ranged)
    {
        $this->container['is_ranged'] = $is_ranged;

        return $this;
    }

    /**
     * Gets ranges
     *
     * @return \OpenAPI\Client\Model\CdsMarketplaceApiModelsCategoryModelsRangedValues[]|null
     */
    public function getRanges()
    {
        return $this->container['ranges'];
    }

    /**
     * Sets ranges
     *
     * @param \OpenAPI\Client\Model\CdsMarketplaceApiModelsCategoryModelsRangedValues[]|null $ranges ranges
     *
     * @return self
     */
    public function setRanges($ranges)
    {
        $this->container['ranges'] = $ranges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


