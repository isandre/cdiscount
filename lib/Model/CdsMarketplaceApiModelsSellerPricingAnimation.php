<?php
/**
 * CdsMarketplaceApiModelsSellerPricingAnimation
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Order Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CdsMarketplaceApiModelsSellerPricingAnimation Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CdsMarketplaceApiModelsSellerPricingAnimation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cds.MarketplaceApi.Models.SellerPricing.Animation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'identifier' => 'int',
        'title' => 'string',
        'code' => 'string',
        'description' => 'string',
        'list_category' => 'string[]',
        'begin_date_operation' => '\DateTime',
        'end_date_operation' => '\DateTime',
        'date_limit_subscription' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'identifier' => 'int32',
        'title' => null,
        'code' => null,
        'description' => null,
        'list_category' => null,
        'begin_date_operation' => 'date-time',
        'end_date_operation' => 'date-time',
        'date_limit_subscription' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'identifier' => 'identifier',
        'title' => 'title',
        'code' => 'code',
        'description' => 'description',
        'list_category' => 'list_category',
        'begin_date_operation' => 'begin_date_operation',
        'end_date_operation' => 'end_date_operation',
        'date_limit_subscription' => 'date_limit_subscription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'identifier' => 'setIdentifier',
        'title' => 'setTitle',
        'code' => 'setCode',
        'description' => 'setDescription',
        'list_category' => 'setListCategory',
        'begin_date_operation' => 'setBeginDateOperation',
        'end_date_operation' => 'setEndDateOperation',
        'date_limit_subscription' => 'setDateLimitSubscription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'identifier' => 'getIdentifier',
        'title' => 'getTitle',
        'code' => 'getCode',
        'description' => 'getDescription',
        'list_category' => 'getListCategory',
        'begin_date_operation' => 'getBeginDateOperation',
        'end_date_operation' => 'getEndDateOperation',
        'date_limit_subscription' => 'getDateLimitSubscription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identifier'] = $data['identifier'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['list_category'] = $data['list_category'] ?? null;
        $this->container['begin_date_operation'] = $data['begin_date_operation'] ?? null;
        $this->container['end_date_operation'] = $data['end_date_operation'] ?? null;
        $this->container['date_limit_subscription'] = $data['date_limit_subscription'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets identifier
     *
     * @return int|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param int|null $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets list_category
     *
     * @return string[]|null
     */
    public function getListCategory()
    {
        return $this->container['list_category'];
    }

    /**
     * Sets list_category
     *
     * @param string[]|null $list_category list_category
     *
     * @return self
     */
    public function setListCategory($list_category)
    {
        $this->container['list_category'] = $list_category;

        return $this;
    }

    /**
     * Gets begin_date_operation
     *
     * @return \DateTime|null
     */
    public function getBeginDateOperation()
    {
        return $this->container['begin_date_operation'];
    }

    /**
     * Sets begin_date_operation
     *
     * @param \DateTime|null $begin_date_operation begin_date_operation
     *
     * @return self
     */
    public function setBeginDateOperation($begin_date_operation)
    {
        $this->container['begin_date_operation'] = $begin_date_operation;

        return $this;
    }

    /**
     * Gets end_date_operation
     *
     * @return \DateTime|null
     */
    public function getEndDateOperation()
    {
        return $this->container['end_date_operation'];
    }

    /**
     * Sets end_date_operation
     *
     * @param \DateTime|null $end_date_operation end_date_operation
     *
     * @return self
     */
    public function setEndDateOperation($end_date_operation)
    {
        $this->container['end_date_operation'] = $end_date_operation;

        return $this;
    }

    /**
     * Gets date_limit_subscription
     *
     * @return \DateTime|null
     */
    public function getDateLimitSubscription()
    {
        return $this->container['date_limit_subscription'];
    }

    /**
     * Sets date_limit_subscription
     *
     * @param \DateTime|null $date_limit_subscription date_limit_subscription
     *
     * @return self
     */
    public function setDateLimitSubscription($date_limit_subscription)
    {
        $this->container['date_limit_subscription'] = $date_limit_subscription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


