<?php
/**
 * CdsMarketplaceApiModelsSellerPricingCommissionDeal
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Order Management
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CdsMarketplaceApiModelsSellerPricingCommissionDeal Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CdsMarketplaceApiModelsSellerPricingCommissionDeal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Cds.MarketplaceApi.Models.SellerPricing.CommissionDeal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'offer_id' => 'int',
        'seller_id' => 'int',
        'product_id' => 'string',
        'ean' => 'string',
        'seller_product_id' => 'string',
        'category' => 'string',
        'label' => 'string',
        'current_rate' => 'double',
        'current_price' => 'double',
        'deal_id' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'proposed_rate' => 'double',
        'min_price' => 'double',
        'max_price' => 'double',
        'status' => 'int',
        'status_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'offer_id' => 'int32',
        'seller_id' => 'int32',
        'product_id' => null,
        'ean' => null,
        'seller_product_id' => null,
        'category' => null,
        'label' => null,
        'current_rate' => 'double',
        'current_price' => 'double',
        'deal_id' => 'int32',
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'proposed_rate' => 'double',
        'min_price' => 'double',
        'max_price' => 'double',
        'status' => 'int32',
        'status_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offer_id' => 'offer_id',
        'seller_id' => 'seller_id',
        'product_id' => 'product_id',
        'ean' => 'ean',
        'seller_product_id' => 'seller_product_id',
        'category' => 'category',
        'label' => 'label',
        'current_rate' => 'current_rate',
        'current_price' => 'current_price',
        'deal_id' => 'deal_id',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'proposed_rate' => 'proposed_rate',
        'min_price' => 'min_price',
        'max_price' => 'max_price',
        'status' => 'status',
        'status_code' => 'status_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offer_id' => 'setOfferId',
        'seller_id' => 'setSellerId',
        'product_id' => 'setProductId',
        'ean' => 'setEan',
        'seller_product_id' => 'setSellerProductId',
        'category' => 'setCategory',
        'label' => 'setLabel',
        'current_rate' => 'setCurrentRate',
        'current_price' => 'setCurrentPrice',
        'deal_id' => 'setDealId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'proposed_rate' => 'setProposedRate',
        'min_price' => 'setMinPrice',
        'max_price' => 'setMaxPrice',
        'status' => 'setStatus',
        'status_code' => 'setStatusCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offer_id' => 'getOfferId',
        'seller_id' => 'getSellerId',
        'product_id' => 'getProductId',
        'ean' => 'getEan',
        'seller_product_id' => 'getSellerProductId',
        'category' => 'getCategory',
        'label' => 'getLabel',
        'current_rate' => 'getCurrentRate',
        'current_price' => 'getCurrentPrice',
        'deal_id' => 'getDealId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'proposed_rate' => 'getProposedRate',
        'min_price' => 'getMinPrice',
        'max_price' => 'getMaxPrice',
        'status' => 'getStatus',
        'status_code' => 'getStatusCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offer_id'] = $data['offer_id'] ?? null;
        $this->container['seller_id'] = $data['seller_id'] ?? null;
        $this->container['product_id'] = $data['product_id'] ?? null;
        $this->container['ean'] = $data['ean'] ?? null;
        $this->container['seller_product_id'] = $data['seller_product_id'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['current_rate'] = $data['current_rate'] ?? null;
        $this->container['current_price'] = $data['current_price'] ?? null;
        $this->container['deal_id'] = $data['deal_id'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['proposed_rate'] = $data['proposed_rate'] ?? null;
        $this->container['min_price'] = $data['min_price'] ?? null;
        $this->container['max_price'] = $data['max_price'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['status_code'] = $data['status_code'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offer_id
     *
     * @return int|null
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param int|null $offer_id offer_id
     *
     * @return self
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets seller_id
     *
     * @return int|null
     */
    public function getSellerId()
    {
        return $this->container['seller_id'];
    }

    /**
     * Sets seller_id
     *
     * @param int|null $seller_id seller_id
     *
     * @return self
     */
    public function setSellerId($seller_id)
    {
        $this->container['seller_id'] = $seller_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean ean
     *
     * @return self
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets seller_product_id
     *
     * @return string|null
     */
    public function getSellerProductId()
    {
        return $this->container['seller_product_id'];
    }

    /**
     * Sets seller_product_id
     *
     * @param string|null $seller_product_id seller_product_id
     *
     * @return self
     */
    public function setSellerProductId($seller_product_id)
    {
        $this->container['seller_product_id'] = $seller_product_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets current_rate
     *
     * @return double|null
     */
    public function getCurrentRate()
    {
        return $this->container['current_rate'];
    }

    /**
     * Sets current_rate
     *
     * @param double|null $current_rate current_rate
     *
     * @return self
     */
    public function setCurrentRate($current_rate)
    {
        $this->container['current_rate'] = $current_rate;

        return $this;
    }

    /**
     * Gets current_price
     *
     * @return double|null
     */
    public function getCurrentPrice()
    {
        return $this->container['current_price'];
    }

    /**
     * Sets current_price
     *
     * @param double|null $current_price current_price
     *
     * @return self
     */
    public function setCurrentPrice($current_price)
    {
        $this->container['current_price'] = $current_price;

        return $this;
    }

    /**
     * Gets deal_id
     *
     * @return int|null
     */
    public function getDealId()
    {
        return $this->container['deal_id'];
    }

    /**
     * Sets deal_id
     *
     * @param int|null $deal_id deal_id
     *
     * @return self
     */
    public function setDealId($deal_id)
    {
        $this->container['deal_id'] = $deal_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets proposed_rate
     *
     * @return double|null
     */
    public function getProposedRate()
    {
        return $this->container['proposed_rate'];
    }

    /**
     * Sets proposed_rate
     *
     * @param double|null $proposed_rate proposed_rate
     *
     * @return self
     */
    public function setProposedRate($proposed_rate)
    {
        $this->container['proposed_rate'] = $proposed_rate;

        return $this;
    }

    /**
     * Gets min_price
     *
     * @return double|null
     */
    public function getMinPrice()
    {
        return $this->container['min_price'];
    }

    /**
     * Sets min_price
     *
     * @param double|null $min_price min_price
     *
     * @return self
     */
    public function setMinPrice($min_price)
    {
        $this->container['min_price'] = $min_price;

        return $this;
    }

    /**
     * Gets max_price
     *
     * @return double|null
     */
    public function getMaxPrice()
    {
        return $this->container['max_price'];
    }

    /**
     * Sets max_price
     *
     * @param double|null $max_price max_price
     *
     * @return self
     */
    public function setMaxPrice($max_price)
    {
        $this->container['max_price'] = $max_price;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return string|null
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param string|null $status_code status_code
     *
     * @return self
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


